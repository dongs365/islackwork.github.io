{"version":3,"sources":["theme/themes.ts","theme/index.ts","components/appHeader.tsx","utils/urlUtil.ts","components/typingCursor.tsx","components/displaySlogan.tsx","components/typingText.tsx","containers/homePage.tsx","redux/actionTypes.ts","redux/actions/settingsAction.ts","utils/colorUtil.ts","components/preferenceGroup.tsx","components/preferenceItem.tsx","containers/tabs/appearanceTab.tsx","containers/tabs/languageTab.tsx","containers/tabs/aboutTab.tsx","containers/tabs/sloganTab.tsx","components/responsive.tsx","containers/settingsPage.tsx","locale/zhHans.ts","locale/zhHant.ts","locale/enUS.ts","locale/index.ts","app.tsx","utils/registerServiceWorker.ts","redux/reducers/settingsReducer.ts","redux/reducers/index.ts","redux/configureStore.ts","index.tsx"],"names":["White","primary","primaryDark","background","accent","textPrimary","textSecondary","Light","Dark","Black","ChromeDark","getTheme","theme","toLowerCase","Container","styled","div","_templateObject","Title","h1","_templateObject2","AppHeader","_this$props","this","props","title","leftExtra","rightExtra","react_default","a","createElement","style","Object","objectSpread","width","undefined","marginRight","flex","marginLeft","Component","getQueryParamsFromUrl","query","URLSearchParams","window","location","search","get","Cursor","span","typingCursor_templateObject","TypingCursor","timer","state","display","_this2","setState","setTimeout","updateCursor","clearTimeout","react_addons_css_transition_group_default","transitionLeaveTimeout","transitionEnterTimeout","transitionName","DisplaySlogan","split","displayText","i","length","push","key","markdown","react_markdown_default","renderers","paragraph","allowedTypes","source","showCursor","flexDirection","typingCursor","React","TypingText","targetText","index","updateIndex","slogan","_this","nowSlogan","nextSlogan","sameIdx","Math","min","slice","text","startsWith","console","log","target","interval","userSelect","textAlign","fontSize","color","fontColor","displaySlogan","defaultProps","Root","homePage_templateObject","HomePage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSlogan","trim","messages","defineMessages","defaultSlogan","id","intl","formatMessage","map","item","filter","mouseCountdown","handleMouseMove","idle","palette","settingsIcon","react_router_dom","to","index_esm","cursor","alignItems","justifyContent","onMouseMove","appHeader","position","top","boxSizing","height","typingText","connect","replace","language","settings","injectIntl","UPDATE_LANGUAGE","UPDATE_THEME","UPDATE_SLOGAN","updateLanguage","type","updateTheme","updateSlogan","hexToRgbA","hex","alpha","arguments","test","c","substring","uc","parseInt","join","concat","Error","preferenceGroup_templateObject","PreferenceGroup","titleId","children","index_es","preferenceGroup_Title","preferenceItem_templateObject","PreferenceItem","actionView","itemView","preferenceItem_Container","borderColor","ThemeBlockContainer","appearanceTab_templateObject","ThemeBlockSelection","appearanceTab_templateObject2","AppearanceTab","scheme","themeBlock","value","onClick","handle","v","backgroundColor","preferenceGroup_PreferenceGroup","preferenceItem_PreferenceItem","Select","select","languageTab_templateObject","LanguageTab","onSelect","e","onChange","AboutTab","about","role","aria-label","packageJson","version","href","rel","fontWeight","SloganTextarea","TextareaAutosize","sloganTab_templateObject","ButtonBar","sloganTab_templateObject2","SloganTab","showSyntax","saveSuccess","setSlogan","onTextChange","onSave","alert","onReset","onSyntaxArrowClick","customTab","spellCheck","paddingRight","paddingLeft","verticalAlign","className","Mobile","react_responsive_default","assign","maxWidth","Tablet","minWidth","Default","settingsPage_templateObject","Sider","settingsPage_templateObject2","NavItem","NavLink","_templateObject3","ContentContainer","_templateObject4","mapStateToProps","mapDispatchToProps","dispatch","SettingsPage","showMenu","m","page","match","meta","name","Helmet","renderRedirect","react_router","url","content","exact","path","component","render","closeIcon","moreIcon","navItems","link","activeClassName","activeStyle","desktopView","responsive_Default","tabletView","responsive_Tablet","mobileView","responsive_Mobile","settingsPage_Root","zhHans","appName","slogan.default","action.ok","action.save","action.save.success","action.cancel","action.reset","settings.application","settings.appearance","settings.language","settings.language.default","settings.about","settings.slogan","settings.slogan.syntax","settings.slogan.syntax.summary","settings.slogan.custom","settings.slogan.interval","settings.about.release_note","settings.appearance.theme","settings.appearance.theme.white","settings.appearance.theme.black","settings.appearance.theme.light","settings.appearance.theme.dark","settings.appearance.theme.chrome-dark","zhHant","enUS","getLocale","navigator","userLanguage","toLocaleLowerCase","addLocaleData","toConsumableArray","en","zh","App","charSet","route","locale","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","rootReducer","combineReducers","action","types","middlewares","logger","createStoreWithMiddleware","applyMiddleware","apply","createStore","enhancer","__REDUX_DEVTOOLS_EXTENSION__","actionCreators","persistConfig","storage","persistedReducer","persistReducer","store","ReactDOM","es","integration_react","persistor","persistStore","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.bdcc4006.chunk.js","sourcesContent":["import { Theme } from './index'\n\nexport const White = {\n  primary: '#fff',\n  primaryDark: '#fff',\n  background: '#fff',\n  accent: '#000',\n  textPrimary: '#000',\n  textSecondary: '#757575',\n} as Theme\n\nexport const Light = {\n  primary: '#fefefe',\n  primaryDark: '#f5f5f5',\n  background: '#F5F5F5',\n  accent: '#000',\n  textPrimary: '#212121',\n  textSecondary: '#9E9E9E',\n} as Theme\n\nexport const Dark = {\n  primary: '#323639',\n  primaryDark: '#282c2f',\n  background: '#303030',\n  accent: '#fff',\n  textPrimary: '#fafafa',\n  textSecondary: '#d6d6d6',\n} as Theme\n\nexport const Black = {\n  primary: '#1c2226',\n  primaryDark: '#1b2024',\n  background: '#000',\n  accent: '#fff',\n  textPrimary: '#fff',\n  textSecondary: '#a0a0a1',\n} as Theme\n\nexport const ChromeDark = {\n  primary: '#333639',\n  primaryDark: '#292c2f',\n  background: '#202124',\n  accent: '#fff',\n  textPrimary: '#f1f3f4',\n  textSecondary: '#9ba0a5',\n} as Theme\n","import { Black, Dark, White, Light, ChromeDark } from './themes'\nimport { ColorProperty } from 'csstype'\n\nexport interface Theme {\n  primary: ColorProperty\n  primaryDark: ColorProperty\n  background: ColorProperty\n  accent: ColorProperty\n  textPrimary: ColorProperty\n  textSecondary: ColorProperty\n}\n\nexport function getTheme(theme?: string): Theme {\n  switch (theme ? theme.toLowerCase() : '') {\n    case 'light':\n      return Light\n    case 'dark':\n      return Dark\n    case 'white':\n      return White\n    case 'black':\n      return Black\n    case 'chrome-dark':\n      return ChromeDark\n    default:\n      return Light\n  }\n}\n","import React, { Component, CSSProperties, ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  height: 64px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 48px 16px;\n`\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n`\n\nclass AppHeader extends Component<{\n  title?: string | JSX.Element\n  rightExtra?: ReactNode\n  leftExtra?: ReactNode\n  style?: CSSProperties\n}> {\n  render() {\n    const { title, leftExtra, rightExtra } = this.props\n    return (\n      <header\n        style={{\n          width: '100%',\n          ...this.props.style,\n        }}\n      >\n        <Container>\n          {leftExtra === undefined ? undefined : <div style={{ marginRight: 16 }}>{leftExtra}</div>}\n          <Title>{title}</Title>\n          <div style={{ flex: 1 }} />\n          {rightExtra === undefined ? (\n            undefined\n          ) : (\n            <div style={{ marginLeft: 16 }}>{rightExtra}</div>\n          )}\n        </Container>\n      </header>\n    )\n  }\n}\n\nexport default AppHeader\n","export const getQueryParamsFromUrl = (query: string): string | null => {\n  return new URLSearchParams(window.location.search).get(query)\n}\n","import React, { Component } from 'react'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport styled from 'styled-components'\n\nconst Cursor = styled.span`\n  border-width: 0px;\n  border-right-width: 0.2em;\n  height: 100%;\n  width: 0.2em;\n  border-style: solid;\n  margin-right: -0.4em;\n  padding-left: 0.1em;\n  padding-right: 0.1em;\n`\n\nclass TypingCursor extends Component {\n  timer: number | undefined = undefined\n\n  state = {\n    display: false,\n  }\n\n  updateCursor() {\n    this.setState({\n      display: !this.state.display,\n    })\n    this.timer = setTimeout(() => this.updateCursor(), 1000)\n  }\n\n  componentDidMount() {\n    this.updateCursor()\n  }\n\n  componentWillUnmount() {\n    if (this.timer !== undefined) {\n      clearTimeout(this.timer)\n    }\n  }\n\n  render() {\n    return (\n      <ReactCSSTransitionGroup\n        transitionLeaveTimeout={500}\n        transitionEnterTimeout={500}\n        transitionName='fade'\n      >\n        {\n          this.state.display ? <Cursor/> : null\n        }\n      </ReactCSSTransitionGroup>\n    )\n  }\n}\n\nexport default TypingCursor\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport TypingCursor from './typingCursor'\n\nclass DisplaySlogan extends React.Component<{\n  displayText: string,\n  showCursor?: boolean\n}> {\n  render():\n    | React.ReactElement<any, string | React.JSXElementConstructor<any>>\n    | string\n    | number\n    | {}\n    | React.ReactNodeArray\n    | React.ReactPortal\n    | boolean\n    | null\n    | undefined {\n    const split = this.props.displayText ? this.props.displayText.split('|') : []\n    const display = []\n    for (let i = 0; i < split.length; i++) {\n      if (i > 0) {\n        display.push(<br key={i * 2 - 1}/>)\n      }\n      const markdown = <ReactMarkdown\n        key={i * 2}\n        renderers={{ paragraph: 'span' }}\n        allowedTypes={[\n          'root',\n          'paragraph',\n          'emphasis',\n          'strong',\n          'delete',\n          'link',\n          'linkReference',\n          'text',\n        ]}\n        source={split[i]}\n      />\n      if (i === split.length - 1 && this.props.showCursor) {\n        display.push(\n          <span style={{\n            display: 'flex',\n            flexDirection: 'row',\n          }}>\n            {markdown}\n            <TypingCursor/>\n          </span>,\n        )\n      } else {\n        display.push(\n          <span>{markdown}</span>,\n        )\n      }\n    }\n    if (display.length === 0 && this.props.showCursor) {\n      display.push(<span><TypingCursor/></span>)\n    }\n    return <div>{display}</div>\n  }\n}\n\nexport default DisplaySlogan\n","import React, { Component } from 'react'\nimport { ColorProperty, TextAlignProperty } from 'csstype'\nimport DisplaySlogan from './displaySlogan'\n\ninterface Props {\n  slogan?: string[]\n  interval: number\n  fontColor: ColorProperty\n  fontSize: number\n  textAlign: TextAlignProperty\n}\n\nclass TypingText extends Component<Props> {\n  static defaultProps = {\n    fontSize: 64,\n    fontColor: '#000',\n    textAlign: 'left',\n    slogan: [],\n    interval: 3,\n  }\n\n  targetText = ''\n  index = -1\n  timer: number | undefined = undefined\n\n  state = {\n    displayText: '',\n  }\n\n  updateIndex = () => {\n    const slogan = this.props.slogan\n    if (slogan === undefined) {\n      this.setState({\n        displayText: '',\n      })\n      this.targetText = ''\n      return\n    }\n    if (this.state.displayText === this.targetText) {\n      if (this.index > 0 && this.targetText === slogan[this.index % slogan.length]) {\n        const nowSlogan = slogan[this.index % slogan.length]\n        const nextSlogan = slogan[(this.index + 1) % slogan.length]\n        let sameIdx = 0\n        for (let i = 0; i < Math.min(nowSlogan.length, nextSlogan.length); i++) {\n          if (nowSlogan[i] === nextSlogan[i]) {\n            sameIdx++\n          } else {\n            break\n          }\n        }\n        this.targetText = nowSlogan.slice(0, sameIdx)\n      } else {\n        this.targetText = slogan[++this.index % slogan.length]\n      }\n    }\n\n    let text = this.state.displayText\n    if (this.targetText.length > text.length && this.targetText.startsWith(text)) {\n      text = this.targetText.slice(0, text.length + 1)\n    } else {\n      text = text.slice(0, text.length - 1)\n    }\n\n    this.setState({\n      displayText: text,\n    })\n    console.log({\n      display: this.state.displayText,\n      target: this.targetText,\n    })\n\n    if (this.targetText === text && text === slogan[this.index % slogan.length]) {\n      this.timer = setTimeout(\n        () => this.updateIndex(),\n        this.props.interval * 1000,\n      )\n      console.log('wait more')\n    } else {\n      this.timer = setTimeout(\n        () => this.updateIndex(),\n        this.props.interval * 200 * 0.2,\n      )\n    }\n  }\n\n  componentDidMount() {\n    this.updateIndex()\n  }\n\n  componentWillUnmount() {\n    if (this.timer !== undefined) {\n      clearTimeout(this.timer)\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          userSelect: 'none',\n          textAlign: this.props.textAlign,\n          fontSize: this.props.fontSize,\n          color: this.props.fontColor,\n        }}\n      >\n        <DisplaySlogan showCursor={true} displayText={this.state.displayText}/>\n      </div>\n    )\n  }\n}\n\nexport default TypingText\n","import React, { Component } from 'react'\nimport './homePage.css'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getTheme } from '../theme'\nimport { defineMessages, InjectedIntl, injectIntl } from 'react-intl'\nimport AppHeader from '../components/appHeader'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { MdSettings } from 'react-icons/md'\nimport styled from 'styled-components'\nimport { getQueryParamsFromUrl } from '../utils/urlUtil'\nimport TypingText from '../components/typingText'\n\nconst Root = styled.div`\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n\n  @media (max-width: 768px) {\n    padding-top: 0;\n    padding-left: 0;\n    padding-right: 0;\n  }\n`\n\ninterface Props {\n  slogan: string\n  intl: InjectedIntl\n  theme: string\n}\n\ninterface State {\n  idle: boolean\n}\n\nclass HomePage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      idle: true,\n    }\n  }\n\n  getSlogan = (): string[] => {\n    let slogan = this.props.slogan\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      slogan = intl.formatMessage(messages.defaultSlogan)\n    }\n\n    return slogan\n      .split('\\n')\n      .map(item => item.trim())\n      .filter(item => item.length > 0)\n  }\n\n  mouseCountdown: number | undefined = undefined\n\n  handleMouseMove = () => {\n    if (this.state.idle) {\n      this.setState({\n        idle: false,\n      })\n    }\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n    this.mouseCountdown = window.setTimeout(\n      () =>\n        this.setState({\n          idle: true,\n        }),\n      2000,\n    )\n  }\n\n  componentWillUnmount() {\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n  }\n\n  render() {\n    const palette = getTheme(this.props.theme)\n\n    const settingsIcon = (\n      <Link to={'/settings'}>\n        <h1>\n          <MdSettings\n            style={{\n              color: palette.textSecondary,\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          />\n        </h1>\n      </Link>\n    )\n    return (\n      <Root\n        style={{\n          background: palette.background,\n          cursor: this.state.idle ? 'none' : 'default',\n        }}\n        onMouseMove={this.handleMouseMove}\n      >\n        <ReactCSSTransitionGroup\n          transitionLeaveTimeout={500}\n          transitionEnterTimeout={300}\n          transitionName='fade'\n        >\n          {this.state.idle ? (\n            undefined\n          ) : (\n            <AppHeader style={{ position: 'absolute', top: 0 }} rightExtra={settingsIcon}/>\n          )}\n        </ReactCSSTransitionGroup>\n        <main\n          style={{\n            boxSizing: 'border-box',\n            height: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <TypingText\n            textAlign={'center'}\n            fontColor={palette.textPrimary}\n            fontSize={72}\n            slogan={this.getSlogan()}\n          />\n        </main>\n      </Root>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  let slogan = getQueryParamsFromUrl('slogan')\n  if (slogan) {\n    slogan = slogan.replace('||', '\\n')\n  }\n\n  return {\n    language: state.settings.language,\n    theme: getQueryParamsFromUrl('theme') || state.settings.theme,\n    slogan: slogan || state.settings.slogan,\n  }\n}\n\nexport default connect(mapStateToProps)(injectIntl(HomePage))\n","export const UPDATE_LANGUAGE = 'UPDATE_LANGUAGE'\n\nexport const UPDATE_THEME = 'UPDATE_THEME'\n\nexport const UPDATE_SLOGAN = 'UPDATE_SLOGAN'\n","import { UPDATE_LANGUAGE, UPDATE_SLOGAN, UPDATE_THEME } from '../actionTypes'\nimport { AnyAction } from 'redux'\n\nexport const updateLanguage = (language: string): AnyAction => ({\n  type: UPDATE_LANGUAGE,\n  language,\n})\n\nexport const updateTheme = (theme: string): AnyAction => ({\n  type: UPDATE_THEME,\n  theme,\n})\n\nexport const updateSlogan = (slogan: string): AnyAction => ({\n  type: UPDATE_SLOGAN,\n  slogan,\n})\n","export function hexToRgbA(hex: string, alpha = 1) {\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    let c = hex.substring(1).split('')\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]]\n    }\n    const uc = parseInt('0x' + c.join(''), 16)\n\n    return `rgba(${[(uc >> 16) & 255, (uc >> 8) & 255, uc & 255].join(',')},${alpha})`\n  }\n  throw new Error('Bad Hex')\n}\n","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Title = styled.div`\n  padding: 16px 0;\n  font-weight: bold;\n  font-size: 1.5rem;\n`\n\nexport default class PreferenceGroup extends Component<{\n  title?: string | JSX.Element\n  titleId?: string\n}> {\n  render() {\n    const { title, titleId, children } = this.props\n\n    if (titleId !== undefined) {\n      return (\n        <div>\n          <FormattedMessage id={titleId}>{text => <Title>{text}</Title>}</FormattedMessage>\n          <div>{children}</div>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <Title>{title}</Title>\n        <div>{children}</div>\n      </div>\n    )\n  }\n}\n","import React, { Component, ReactNode } from 'react'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 16px 0;\n  margin-bottom: 16px;\n  border: 0 solid;\n  border-bottom-width: 1px;\n`\n\ninterface Props {\n  title?: string\n  titleId?: string\n  actionView?: ReactNode\n  theme?: string\n}\n\nexport default class PreferenceItem extends Component<Props> {\n  render(): ReactNode {\n    const { title, titleId, actionView } = this.props\n    const itemView = (\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          {titleId ? <FormattedMessage id={titleId} /> : <span>{title}</span>}\n        </div>\n        <div style={{ flex: 2 }}>\n          <div>{actionView}</div>\n        </div>\n      </div>\n    )\n\n    return (\n      <Container\n        style={{\n          borderColor: hexToRgbA(getTheme(this.props.theme).textSecondary, 0.2),\n        }}\n      >\n        {itemView}\n        {this.props.children}\n      </Container>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport { hexToRgbA } from '../../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport styled from 'styled-components'\nimport { AnyAction } from 'redux'\n\nconst ThemeBlockContainer = styled.div`\n  margin: 8px;\n  display: inline-block;\n  border: 1px solid;\n  border-radius: 8px;\n  padding: 16px 16px 14px;\n  user-select: none;\n  cursor: pointer;\n  font-size: 1rem;\n`\n\nconst ThemeBlockSelection = styled.div`\n  height: 2px;\n  margin-top: 2px;\n  border-width: 0;\n  border-radius: 2px;\n`\n\ninterface Props {\n  theme?: string\n\n  updateTheme(theme: string): AnyAction\n}\n\nclass AppearanceTab extends Component<Props> {\n  render() {\n    const { theme, updateTheme } = this.props\n    if (theme === undefined) {\n      updateTheme('light')\n    }\n    const scheme = getTheme(theme)\n    const themeBlock = (titleId: string, value: string) => {\n      return (\n        <ThemeBlockContainer\n          onClick={((handle, v) => () => handle(v))(updateTheme, value)}\n          style={{\n            borderColor: hexToRgbA(scheme.textSecondary, 0.2),\n            color: getTheme(value).textPrimary,\n            backgroundColor: getTheme(value).background,\n          }}\n        >\n          <FormattedMessage id={titleId} />\n          <ThemeBlockSelection\n            style={{\n              backgroundColor: value === theme ? scheme.accent : 'transparent',\n            }}\n          />\n        </ThemeBlockContainer>\n      )\n    }\n\n    return (\n      <div>\n        <FormattedMessage id={'settings.appearance.theme'}>\n          {text => (\n            <PreferenceGroup title={text}>\n              <PreferenceItem>\n                <div style={{ width: '100%' }}>\n                  {themeBlock('settings.appearance.theme.white', 'white')}\n                  {themeBlock('settings.appearance.theme.light', 'light')}\n                  {themeBlock('settings.appearance.theme.dark', 'dark')}\n                  {themeBlock('settings.appearance.theme.black', 'black')}\n                  {themeBlock('settings.appearance.theme.chrome-dark', 'chrome-dark')}\n                </div>\n              </PreferenceItem>\n            </PreferenceGroup>\n          )}\n        </FormattedMessage>\n      </div>\n    )\n  }\n}\n\nexport default AppearanceTab\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport { FormattedMessage } from 'react-intl'\nimport { AnyAction } from 'redux'\nimport styled from 'styled-components'\n\nconst Select = styled.select`\n  font-size: 100%;\n  border-radius: 4px;\n  font-family: sans-serif;\n  line-height: 1.2rem;\n  align-items: center;\n  padding: 2px;\n  display: inline-block;\n  text-align: start;\n  height: auto;\n  border-color: rgb(169, 169, 169);\n\n  :focus {\n    outline-style: none;\n  }\n`\n\ninterface Props {\n  theme: string\n  language: string\n\n  updateLanguage(theme: string): AnyAction\n}\n\nexport default class LanguageTab extends Component<Props> {\n  onSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.updateLanguage(e.target.value)\n  }\n\n  render() {\n    const scheme = getTheme(this.props.theme)\n    return (\n      <PreferenceGroup titleId={'settings.language'}>\n        <PreferenceItem>\n          <Select\n            style={{\n              backgroundColor: scheme.primary,\n              color: scheme.textPrimary,\n            }}\n            value={this.props.language}\n            onChange={this.onSelect}\n          >\n            <FormattedMessage id={'settings.language.default'}>\n              {text => <option value=''>{text}</option>}\n            </FormattedMessage>\n            <option value='zh-Hans'>简体中文</option>\n            <option value='zh-Hant'>正體中文</option>\n            <option value='en-US'>English</option>\n          </Select>\n        </PreferenceItem>\n      </PreferenceGroup>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport { FormattedMessage } from 'react-intl'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport packageJson from '../../../package.json'\n\ninterface Props {\n  theme: string\n}\n\nexport default class AboutTab extends Component<Props> {\n  render() {\n    const { theme } = this.props\n    const scheme = getTheme(theme)\n    const about = (\n      <FormattedMessage id={'settings.about'}>\n        {text => (\n          <PreferenceGroup title={text}>\n            <PreferenceItem>\n              <div>\n                <span role={'img'} aria-label={'logo'}>\n                  💼\n                </span>{' '}\n                Version {packageJson.version}\n              </div>\n            </PreferenceItem>\n            <PreferenceItem>\n              <div>\n                <a\n                  href={'https://github.com/dongs365/islackwork'}\n                  target={'_blank'}\n                  rel={'noopener noreferrer'}\n                  style={{\n                    fontWeight: 'bold',\n                    color: scheme.accent,\n                  }}\n                >\n                  Github\n                </a>\n              </div>\n            </PreferenceItem>\n            <PreferenceItem>\n              <div>\n                <a\n                  href={'https://github.com/dongs365/islackwork/releases'}\n                  target={'_blank'}\n                  rel={'noopener noreferrer'}\n                  style={{\n                    fontWeight: 'bold',\n                    color: scheme.accent,\n                  }}\n                >\n                  <FormattedMessage id={'settings.about.release_note'} />\n                </a>\n              </div>\n            </PreferenceItem>\n          </PreferenceGroup>\n        )}\n      </FormattedMessage>\n    )\n\n    return <div>{about}</div>\n  }\n}\n","import React, { Component } from 'react'\nimport { InjectedIntl, defineMessages, FormattedMessage } from 'react-intl'\nimport { getTheme } from '../../theme'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport { MdArrowDropDown, MdArrowDropUp } from 'react-icons/md'\nimport ReactMarkdown from 'react-markdown'\nimport { AnyAction } from 'redux'\nimport { TextareaAutosize } from 'react-autosize-textarea/lib/TextareaAutosize'\nimport styled from 'styled-components'\n\nconst SloganTextarea = styled(TextareaAutosize)`\n  font-size: 1.2rem;\n  border-radius: 8px;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  padding: 8px 16px;\n  line-height: 1.8rem;\n  min-height: 10rem;\n  resize: none;\n  overflow: hidden;\n\n  :focus {\n    outline-style: none;\n  }\n`\n\nconst ButtonBar = styled.div`\n  display: inline-block;\n  margin-top: 16px;\n  margin-bottom: 8px;\n\n  > button {\n    margin: 8px;\n    font-size: 1rem;\n    font-weight: 500;\n    padding: 8px 1rem;\n    border-radius: 4px;\n    border-color: rgba(0, 0, 0, 0);\n  }\n`\n\ninterface Props {\n  theme: string\n  interval: number\n  slogan?: string\n  intl: InjectedIntl\n\n  updateSlogan(theme: string): AnyAction\n\n  updateInterval(theme: number): AnyAction\n}\n\ninterface State {\n  text: string\n  showSyntax: boolean\n}\n\nexport default class SloganTab extends Component<Props, State> {\n  state = {\n    text: '',\n    showSyntax: false,\n  }\n\n  messages = defineMessages({\n    saveSuccess: {\n      id: 'action.save.success',\n    },\n  })\n\n  componentDidMount() {\n    this.setSlogan()\n  }\n\n  setSlogan = () => {\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      this.setState({\n        text: intl.formatMessage(messages.defaultSlogan),\n      })\n    } else {\n      this.setState({\n        text: this.props.slogan,\n      })\n    }\n  }\n\n  // @ts-ignore\n  onTextChange = e => {\n    const text = e.target.value\n    if (text === undefined) {\n      this.setState({ text: '' })\n    } else {\n      this.setState({ text })\n    }\n  }\n\n  onSave = () => {\n    this.props.updateSlogan(this.state.text)\n    alert(this.props.intl.formatMessage(this.messages.saveSuccess))\n    this.setSlogan()\n  }\n\n  onReset = () => {\n    this.props.updateSlogan('')\n    this.setSlogan()\n  }\n\n  onSyntaxArrowClick = () => {\n    this.setState({ showSyntax: !this.state.showSyntax })\n  }\n\n  render() {\n    const { theme } = this.props\n    const scheme = getTheme(theme)\n\n    const customTab = (\n      <PreferenceGroup titleId={'settings.slogan.custom'}>\n        <PreferenceItem>\n          <div>\n            <SloganTextarea\n              onChange={this.onTextChange}\n              value={this.state.text}\n              spellCheck={false}\n              style={{\n                backgroundColor: scheme.primary,\n                color: scheme.textPrimary,\n              }}\n            />\n            <div\n              style={{\n                paddingRight: 16,\n                paddingLeft: 16,\n                userSelect: 'none',\n                color: scheme.textSecondary,\n                fontSize: '0.8rem',\n              }}\n            >\n              <div\n                onClick={this.onSyntaxArrowClick}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <FormattedMessage id={'settings.slogan.syntax'} />\n                {this.state.showSyntax ? (\n                  <MdArrowDropUp\n                    style={{\n                      verticalAlign: 'middle',\n                      marginLeft: 4,\n                      fontSize: '1rem',\n                    }}\n                  />\n                ) : (\n                  <MdArrowDropDown\n                    style={{\n                      verticalAlign: 'middle',\n                      marginLeft: 4,\n                      fontSize: '1rem',\n                    }}\n                  />\n                )}\n              </div>\n              {this.state.showSyntax ? (\n                <div>\n                  <FormattedMessage id={'settings.slogan.syntax.summary'}>\n                    {text => {\n                      if (typeof text !== 'string') {\n                        return null\n                      }\n                      return <ReactMarkdown renderers={{ paragraph: 'div' }} source={text} />\n                    }}\n                  </FormattedMessage>\n                </div>\n              ) : (\n                undefined\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'row',\n            }}\n          >\n            <div style={{ flex: 1 }} />\n            <ButtonBar className={'button-bar'}>\n              <button\n                onClick={this.onReset}\n                style={{\n                  backgroundColor: scheme.primary,\n                  color: scheme.textPrimary,\n                }}\n              >\n                <FormattedMessage id={'action.reset'} />\n              </button>\n              <button\n                onClick={this.onSave}\n                style={{\n                  backgroundColor: scheme.primary,\n                  color: scheme.textPrimary,\n                }}\n              >\n                <FormattedMessage id={'action.save'} />\n              </button>\n            </ButtonBar>\n          </div>\n        </PreferenceItem>\n      </PreferenceGroup>\n    )\n\n    return <div>{customTab}</div>\n  }\n}\n","import Responsive from 'react-responsive'\nimport React from 'react'\n\nexport const Mobile = (props: any) => <Responsive {...props} maxWidth={425} />\nexport const Tablet = (props: any) => <Responsive {...props} minWidth={426} maxWidth={768} />\nexport const Default = (props: any) => <Responsive {...props} minWidth={769} />\n","import React, { Component } from 'react'\nimport {\n  Link,\n  Route,\n  Switch,\n  NavLink,\n  Redirect,\n  RouteComponentProps,\n  match as Match,\n} from 'react-router-dom'\nimport { FormattedMessage, injectIntl } from 'react-intl'\nimport { connect } from 'react-redux'\nimport { updateLanguage, updateTheme, updateSlogan } from '../redux/actions/settingsAction'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { Helmet } from 'react-helmet'\nimport { MdClose, MdMoreVert } from 'react-icons/md'\nimport { AppearanceTab, AboutTab, SloganTab, LanguageTab } from './tabs'\nimport styled from 'styled-components'\nimport { Dispatch } from 'redux'\nimport AppHeader from '../components/appHeader'\nimport { Default, Mobile, Tablet } from '../components/responsive'\n\nconst Root = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n`\n\nconst Sider = styled.div`\n  padding: 16px;\n  border: 0 solid;\n  border-right-width: 1px;\n  height: 100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .selected {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    box-sizing: border-box;\n    border-right-width: 0;\n    flex-direction: row;\n    width: 100%;\n    height: auto;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n      width: 0 !important;\n    }\n  }\n`\n\nconst NavItem = styled(NavLink)`\n  text-decoration: none;\n  padding: 8px 32px 8px 16px;\n  margin-bottom: 16px;\n  margin-right: 8px;\n  font-size: 1rem;\n  white-space: pre;\n  font-weight: 500;\n\n  :hover {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  &.active {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    padding: 8px 16px 8px 16px;\n    margin-right: 8px;\n  }\n`\n\nconst ContentContainer = styled.div`\n  width: 100%;\n  padding: 0 16px;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n`\n\ninterface Props {\n  theme: string\n}\n\nconst mapStateToProps = (state: any) => ({\n  language: state.settings.language,\n  theme: state.settings.theme,\n  slogan: state.settings.slogan,\n  interval: state.settings.interval,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  updateLanguage: (language: string) => dispatch(updateLanguage(language)),\n  updateTheme: (theme: string) => dispatch(updateTheme(theme)),\n  updateSlogan: (slogan: string) => dispatch(updateSlogan(slogan)),\n})\n\nclass SettingsPage extends Component<RouteComponentProps & Props> {\n  state = {\n    showMenu: true,\n  }\n\n  render() {\n    const { match, theme } = this.props\n    const palette = getTheme(theme)\n\n    const meta = (\n      <FormattedMessage id='settings'>\n        {name => (\n          <Helmet>\n            <title>{name}</title>\n          </Helmet>\n        )}\n      </FormattedMessage>\n    )\n\n    const renderRedirect = ((m: Match<any>) => () => <Redirect to={`${m.url}/appearance`} />)(match)\n\n    const content = (\n      <ContentContainer>\n        <Switch>\n          <Route\n            exact\n            path={`${match.url}/slogan`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(injectIntl(SloganTab))}\n          />\n          <Route\n            exact\n            path={`${match.url}/language`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(LanguageTab)}\n          />\n          <Route\n            exact\n            path={`${match.url}/appearance`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(AppearanceTab)}\n          />\n          <Route\n            exact\n            path={`${match.url}/about`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(AboutTab)}\n          />\n          <Route render={renderRedirect} />\n        </Switch>\n      </ContentContainer>\n    )\n\n    const links = ['appearance', 'slogan', 'language', 'about']\n\n    const closeIcon = (\n      <Link to={'/'}>\n        <MdClose\n          style={{\n            color: palette.textPrimary,\n            fontSize: '2em',\n            verticalAlign: 'middle',\n          }}\n        />\n      </Link>\n    )\n\n    const moreIcon = (\n      <MdMoreVert\n        style={{\n          color: palette.textPrimary,\n          fontSize: '2em',\n          verticalAlign: 'middle',\n        }}\n        onClick={((page, showMenu) => () => page.setState({ showMenu }))(\n          this,\n          !this.state.showMenu,\n        )}\n      />\n    )\n\n    const navItems = links.map((link, key) => (\n      <NavItem\n        key={key}\n        activeClassName={'selected'}\n        activeStyle={{ color: palette.textPrimary }}\n        style={{ color: palette.textSecondary }}\n        to={`${match.url}/${link}`}\n      >\n        <FormattedMessage id={`settings.${link}`} />\n      </NavItem>\n    ))\n\n    const desktopView = (\n      <Default>\n        <main\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n          }}\n        >\n          <Sider\n            style={{\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\n            }}\n          >\n            {navItems}\n          </Sider>\n          {content}\n        </main>\n      </Default>\n    )\n\n    const tabletView = (\n      <Tablet>\n        <main\n          style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <Sider\n            style={{\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\n            }}\n          >\n            {navItems}\n          </Sider>\n          {content}\n        </main>\n      </Tablet>\n    )\n    const mobileView = (\n      <Mobile>\n        <main\n          style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {this.state.showMenu ? (\n            <Sider\n              style={{\n                borderColor: hexToRgbA(palette.textSecondary, 0.2),\n                width: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              {navItems}\n            </Sider>\n          ) : (\n            undefined\n          )}\n          {content}\n        </main>\n      </Mobile>\n    )\n    return (\n      <Root\n        style={{\n          backgroundColor: palette.background,\n          color: palette.textPrimary,\n        }}\n      >\n        {meta}\n        <FormattedMessage id='settings'>\n          {title => [\n            <Default key={0}>\n              <AppHeader title={title} rightExtra={closeIcon} />\n            </Default>,\n            <Tablet key={1}>\n              <AppHeader title={title} leftExtra={closeIcon} />\n            </Tablet>,\n            <Mobile key={2}>\n              <AppHeader title={title} leftExtra={closeIcon} rightExtra={moreIcon} />\n            </Mobile>,\n          ]}\n        </FormattedMessage>\n        {desktopView}\n        {tabletView}\n        {mobileView}\n      </Root>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SettingsPage)\n","import I18n from './i18n'\n\nexport default {\n  appName: '我工作摸鱼',\n\n  'slogan.default': `**摸鱼**|是一种本能\n**摸鱼**|是与生俱来的天赋\n**我工作摸鱼**\n上班是不可能上班的|这辈子都不可能上班的\n装模作样上班|真心实意下班\n你摸鱼我摸鱼|老板宝马变青桔\n上班摸鱼一时爽|一直摸鱼一直爽\n上班摆烂|啥也不干\n上班划水|精神堡垒\n上班摸鱼|心旷神怡`,\n  'action.ok': '好的',\n  'action.save': '保存',\n  'action.save.success': '保存成功',\n  'action.cancel': '取消',\n  'action.reset': '重置',\n\n  settings: '设置',\n  'settings.application': '应用程序',\n  'settings.appearance': '界面',\n  'settings.language': '语言',\n  'settings.language.default': '跟随系统',\n  'settings.about': '关于',\n  'settings.slogan': '标语',\n  'settings.slogan.syntax': '语法说明',\n  'settings.slogan.syntax.summary': `一行语句为一段，使用 | 进行段内分行\n\n另外支持使用部分简单的 Markdown 语法：\n\n\\`**加粗**\\` ⇨ **加粗**\n\n\\`*斜体*\\` ⇨ *斜体*\n\n\\`~~删除~~\\` ⇨ ~~删除~~`,\n  'settings.slogan.custom': '自定义标语',\n  'settings.slogan.interval': '时间间隔',\n  'settings.about.release_note': '更新日志',\n  'settings.appearance.theme': '主题',\n  'settings.appearance.theme.white': '白 色',\n  'settings.appearance.theme.black': '黑 色',\n  'settings.appearance.theme.light': '亮 色',\n  'settings.appearance.theme.dark': '暗 色',\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\n} as I18n\n","import I18n from './i18n'\n\nexport default {\n  appName: '我愛工作',\n\n  'slogan.default': `**優秀**|是一種習慣\n**優秀**|是與生俱來的天賦\n**我愛工作**\n工作使我快樂\n我徜徉在工作的海洋裡\n上司叫我吃飯|我充耳不聞\n同事喊我喝水|我無動於衷\n老闆喊我睡覺|我百般推辭`,\n  'action.ok': '好的',\n  'action.save': '保存',\n  'action.save.success': '保存成功',\n  'action.cancel': '取消',\n  'action.reset': '重置',\n\n  settings: '設置',\n  'settings.application': '應用程序',\n  'settings.appearance': '界面',\n  'settings.language': '語言',\n  'settings.language.default': '跟隨系統',\n  'settings.about': '關於',\n  'settings.slogan': '標語',\n  'settings.slogan.syntax': '語法說明',\n  'settings.slogan.syntax.summary': `一行語句為一段，使用 | 進行段內分行\n\n另外支持使用部分簡單的 Markdown 語法：\n\n\\`**加粗**\\` ⇨ **加粗**\n\n\\`*斜體*\\` ⇨ *斜體*\n\n\\`~~刪除~~\\` ⇨ ~~刪除~~`,\n  'settings.slogan.custom': '自定義標語',\n  'settings.slogan.interval': '時間間隔',\n  'settings.about.release_note': '更新日誌',\n  'settings.appearance.theme': '主題',\n  'settings.appearance.theme.white': '白 色',\n  'settings.appearance.theme.black': '黑 色',\n  'settings.appearance.theme.light': '亮 色',\n  'settings.appearance.theme.dark': '暗 色',\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\n} as I18n\n","import I18n from './i18n'\n\nexport default {\n  appName: 'I ❤ Works',\n\n  'slogan.default': `**Excellent**| is a habit\n**Excellent**| is a gift\n**I love working**\nWorking makes me happy\nI am in the ocean of work\nBoss told me to have lunch | I turn a deaf ear\nColleagues call me to drink | I am indifferent\nManager call me to sleep | I refuse strongly`,\n  'action.ok': 'OK',\n  'action.save': 'Save',\n  'action.save.success': 'Saved successfully',\n  'action.cancel': 'Cancel',\n  'action.reset': 'Reset',\n\n  settings: 'Settings',\n  'settings.application': 'Application',\n  'settings.appearance': 'Appearance',\n  'settings.language': 'Language',\n  'settings.language.default': 'Default',\n  'settings.about': 'About',\n  'settings.slogan': 'Slogan',\n  'settings.slogan.syntax': 'Syntax description',\n  'settings.slogan.syntax.summary': `\nOne line statement is a paragraph, use '|' to perform line break\n\nAnd you can use some basic Markdown inline syntax:\n\n\\`**Bold**\\` ⇨ **Bold**\n\n\\`*Italic*\\` ⇨ *Italic*\n\n\\`~~Delete~~\\` ⇨ ~~Delete~~`,\n  'settings.slogan.custom': 'Custom slogan',\n  'settings.slogan.interval': 'Interval',\n  'settings.about.release_note': 'Release Notes',\n  'settings.appearance.theme': 'Theme',\n  'settings.appearance.theme.white': 'White',\n  'settings.appearance.theme.black': 'Black',\n  'settings.appearance.theme.light': 'Light',\n  'settings.appearance.theme.dark': 'Dark',\n  'settings.appearance.theme.chrome-dark': 'Chrome Dark',\n} as I18n\n","import zhHans from './zhHans'\nimport zhHant from './zhHant'\nimport enUS from './enUS'\nimport I18n from './i18n'\n\nexport function getLocale(language: string): I18n {\n  let target = language\n  if (!target) {\n    // @ts-ignore\n    target = navigator.userLanguage || navigator.language\n  }\n  switch (target.toLocaleLowerCase()) {\n    case 'zh':\n    case 'zh-hans':\n    case 'zh-cn':\n      return zhHans\n    case 'zh-hk':\n    case 'zh-tw':\n    case 'zh-mo':\n    case 'zh-sg':\n    case 'zh-hant':\n      return zhHant\n    default:\n      return enUS\n  }\n}\n","import React, { Component } from 'react'\n\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\n\nimport HomePage from './containers/homePage'\nimport SettingsPage from './containers/settingsPage'\n\nimport { connect } from 'react-redux'\n\nimport { getLocale } from './locale'\n\nimport { addLocaleData, FormattedMessage, IntlProvider } from 'react-intl'\nimport zh from 'react-intl/locale-data/zh'\nimport en from 'react-intl/locale-data/en'\nimport { Helmet } from 'react-helmet'\n\nimport { getTheme } from './theme'\nimport { getQueryParamsFromUrl } from './utils/urlUtil'\n\naddLocaleData([...en, ...zh])\n\ninterface Props {\n  theme: string\n  language: string\n}\n\nclass App extends Component<Props> {\n  render() {\n    const theme = this.props.theme\n    const scheme = getTheme(theme)\n\n    const meta = (\n      <FormattedMessage id={'appName'}>\n        {appName => (\n          <Helmet>\n            <meta charSet='utf-8' />\n            <title>{appName}</title>\n            <meta name='theme-color' content={scheme.background} />\n          </Helmet>\n        )}\n      </FormattedMessage>\n    )\n\n    const route = (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={'/'} component={HomePage} />\n          <Route path={'/settings'} component={SettingsPage} />\n          <Route render={(() => () => <Redirect to={'/'} />)()} />\n        </Switch>\n      </BrowserRouter>\n    )\n\n    return (\n      <IntlProvider locale={navigator.language} messages={getLocale(this.props.language)}>\n        <div>\n          {meta}\n          {route}\n        </div>\n      </IntlProvider>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    language: getQueryParamsFromUrl('lang') || state.settings.language,\n    theme: state.settings.theme,\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?(registration: ServiceWorkerRegistration): void\n  onUpdate?(registration: ServiceWorkerRegistration): void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as types from '../actionTypes'\nimport { AnyAction } from 'redux'\n\nconst initialState = {}\n\nexport function SettingsReducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case types.UPDATE_LANGUAGE:\n      return {\n        ...state,\n        language: action.language,\n      }\n    case types.UPDATE_THEME:\n      return {\n        ...state,\n        theme: action.theme,\n      }\n    case types.UPDATE_SLOGAN:\n      return {\n        ...state,\n        slogan: action.slogan,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { SettingsReducer } from './settingsReducer'\n\nconst rootReducer = combineReducers({\n  settings: SettingsReducer,\n})\n\nexport default rootReducer\n","import { applyMiddleware, createStore } from 'redux'\nimport * as actionCreators from './actions/settingsAction'\nimport logger from 'redux-logger'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from './reducers/index'\n\nconst middlewares = [logger]\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\n\nconst enhancer =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ actionCreators })\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore() {\n  return createStoreWithMiddleware(persistedReducer, enhancer)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport * as ServiceWorker from './utils/registerServiceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistStore(store)}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n)\n\nServiceWorker.register()\n"],"sourceRoot":""}